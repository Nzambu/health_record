{"remainingRequest":"/var/www/html/1/medbook-dev-app-vue/node_modules/babel-loader/lib/index.js!/var/www/html/1/medbook-dev-app-vue/node_modules/eslint-loader/index.js??ref--13-0!/var/www/html/1/medbook-dev-app-vue/src/store/PatientModule.js","dependencies":[{"path":"/var/www/html/1/medbook-dev-app-vue/src/store/PatientModule.js","mtime":1611325120512},{"path":"/var/www/html/1/medbook-dev-app-vue/node_modules/cache-loader/dist/cjs.js","mtime":1610518510696},{"path":"/var/www/html/1/medbook-dev-app-vue/node_modules/babel-loader/lib/index.js","mtime":1610518510640},{"path":"/var/www/html/1/medbook-dev-app-vue/node_modules/eslint-loader/index.js","mtime":1610518511248}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgUGF0aWVudFNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvUGF0aWVudFNlcnZpY2UnOwp2YXIgaW5pdGlhbFN0YXRlID0gewogIGxpc3Q6IG51bGwsCiAgZXJyb3I6IG51bGwsCiAgZ2VuZGVyOiBudWxsLAogIHNlcnZpY2U6IG51bGwKfTsKZXhwb3J0IHZhciBwYXRpZW50ID0gewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IGluaXRpYWxTdGF0ZSwKICBhY3Rpb25zOiB7CiAgICAvKioKICAgICAqIExpc3QgYWxsIHRoZSBwYXRpZW50cwogICAgICogCiAgICAgKiBAcGFyYW0geyp9IHBhcmFtKSBjb21taXQgdG8gdnVleAogICAgICovCiAgICBnZXRMaXN0OiBmdW5jdGlvbiBnZXRMaXN0KF9yZWYpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICByZXR1cm4gUGF0aWVudFNlcnZpY2UuZ2V0UGF0aWVudExpc3QoKS50aGVuKGZ1bmN0aW9uIChwYXRpZW50KSB7CiAgICAgICAgdmFyIGxpc3QgPSBwYXRpZW50LmRhdGE7CiAgICAgICAgY29tbWl0KCdsaXN0JywgbGlzdCk7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShsaXN0KTsKICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICAgIGNvbW1pdCgnZmFpbCcpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIFNhdmUgYSBuZXcgcGF0aWVudAogICAgICogQHBhcmFtIHsqfSBwYXJhbTAgY29tbWl0IHRvIHZ1ZXgKICAgICAqIEBwYXJhbSB7Kn0gcGF0aWVudCAKICAgICAqLwogICAgc2F2ZVBhdGllbnQ6IGZ1bmN0aW9uIHNhdmVQYXRpZW50KF9yZWYyLCBwYXRpZW50KSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmMi5jb21taXQ7CiAgICAgIHJldHVybiBQYXRpZW50U2VydmljZS5zYXZlTmV3UGF0aWVudChwYXRpZW50KS50aGVuKGZ1bmN0aW9uIChwYXRpZW50KSB7CiAgICAgICAgdmFyIHJlY29yZCA9IHBhdGllbnQuZGF0YTsKICAgICAgICBjb21taXQoJ3NhdmUnLCByZWNvcmQpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVjb3JkKTsKICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgY29tbWl0KCdmYWlsJyk7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogVXBkYXRlIHBhdGllbnQgcmVjb3JkCiAgICAgKiBAcGFyYW0geyp9IHBhcmFtMCBjb21taXQgdG8gdnVleAogICAgICogQHBhcmFtIHsqfSBwYXRpZW50IGRldGFpbHMgZm9yIHBhdGllbnQKICAgICAqLwogICAgdXBkYXRlUGF0aWVudDogZnVuY3Rpb24gdXBkYXRlUGF0aWVudChfcmVmMywgcGF0aWVudCkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjMuY29tbWl0OwogICAgICByZXR1cm4gUGF0aWVudFNlcnZpY2UudXBkYXRlUGF0aWVudChwYXRpZW50KS50aGVuKGZ1bmN0aW9uIChwYXRpZW50KSB7CiAgICAgICAgdmFyIHJlY29yZCA9IHBhdGllbnQuZGF0YTsKICAgICAgICBjb21taXQoJ3VwZGF0ZScsIHJlY29yZCk7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwYXRpZW50KTsKICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogRGVsZXRlIHBhdGllbnQgcmVjb3JkCiAgICAgKiBAcGFyYW0geyp9IHBhcmFtMCBjb21taXQgdG8gdnVleAogICAgICogQHBhcmFtIHsqfSBwYXRpZW50SUQgCiAgICAgKi8KICAgIGRlbGV0ZVBhdGllbnQ6IGZ1bmN0aW9uIGRlbGV0ZVBhdGllbnQoX3JlZjQsIHBhdGllbnRJRCkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjQuY29tbWl0OwogICAgICByZXR1cm4gUGF0aWVudFNlcnZpY2UuZGVsZXRlUGF0aWVudChwYXRpZW50SUQpLnRoZW4oZnVuY3Rpb24gKHBhdGllbnQpIHsKICAgICAgICB2YXIgcmVjb3JkID0gcGF0aWVudC5kYXRhOwogICAgICAgIGNvbW1pdCgnZGVsZXRlJywgcmVjb3JkLmlkKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBhdGllbnQpOwogICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBjb21taXQoJ2ZhaWwnKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBMaXN0IGFsbCBnZW5kZXJzCiAgICAgKi8KICAgIGdlbmRlckxpc3Q6IGZ1bmN0aW9uIGdlbmRlckxpc3QoX3JlZjUpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY1LmNvbW1pdDsKICAgICAgcmV0dXJuIFBhdGllbnRTZXJ2aWNlLmdlbmRlckxpc3QoewogICAgICAgIGNvbW1pdDogY29tbWl0CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGdlbmRlcikgewogICAgICAgIHZhciBsaXN0ID0gZ2VuZGVyLmRhdGE7CiAgICAgICAgY29tbWl0KCdnZW5kZXInLCBsaXN0KTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGxpc3QpOwogICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBjb21taXQoJ2ZhaWwnKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBMaXN0IGFsbCBzZXJ2aWNlCiAgICAgKi8KICAgIHNlcnZpY2VMaXN0OiBmdW5jdGlvbiBzZXJ2aWNlTGlzdChfcmVmNikgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjYuY29tbWl0OwogICAgICByZXR1cm4gUGF0aWVudFNlcnZpY2Uuc2VydmljZUxpc3QoewogICAgICAgIGNvbW1pdDogY29tbWl0CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNlcnZpY2UpIHsKICAgICAgICB2YXIgbGlzdCA9IHNlcnZpY2UuZGF0YTsKICAgICAgICBjb21taXQoJ3NlcnZpY2UnLCBsaXN0KTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGxpc3QpOwogICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBjb21taXQoJ2ZhaWwnKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwogICAgICB9KTsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgbGlzdDogZnVuY3Rpb24gbGlzdChzdGF0ZSwgcGF0aWVudExpc3QpIHsKICAgICAgc3RhdGUubGlzdCA9IHBhdGllbnRMaXN0OwogICAgfSwKICAgIHNhdmU6IGZ1bmN0aW9uIHNhdmUoc3RhdGUsIG5ld1BhdGllbnQpIHsKICAgICAgLy8gQWRkIGF0IHRoZSB0b3Agb2YgdGhlIGFycmF5CiAgICAgIC8vIHN0YXRlLmxpc3QudW5zaGlmdChuZXdQYXRpZW50KQogICAgICAvLyBBZGQgYXQgdGhlIGVuZCBvZiB0aGUgYXJyYXkKICAgICAgc3RhdGUubGlzdC5wdXNoKG5ld1BhdGllbnQpOwogICAgfSwKICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHN0YXRlLCB1cGRhdGVkUGF0aWVudCkgewogICAgICB2YXIgcGF0aWVudEluZGV4ID0gc3RhdGUubGlzdC5maW5kSW5kZXgoZnVuY3Rpb24gKHBhdGllbnQpIHsKICAgICAgICByZXR1cm4gcGF0aWVudC5pZCA9PT0gdXBkYXRlZFBhdGllbnQuaWQ7CiAgICAgIH0pOwoKICAgICAgaWYgKHBhdGllbnRJbmRleCAhPT0gLTEpIHsKICAgICAgICBzdGF0ZS5saXN0LnNwbGljZShwYXRpZW50SW5kZXgsIDEsIHVwZGF0ZWRQYXRpZW50KTsKICAgICAgfQogICAgfSwKICAgIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShzdGF0ZSwgcGF0aWVudElEKSB7CiAgICAgIC8vIHN0YXRlLmxpc3QgPSBzdGF0ZS5saXN0LmZpbHRlcigocGF0aWVudHMpID0+IHBhdGllbnRzLmlkICE9PSBwYXRpZW50SUQpCiAgICAgIC8vIGluZGV4ID0gc3RhdGUuY2Fycy5maW5kSW5kZXgoY2FyID0+IGNhci5pZCA9PSBpZCkKICAgICAgLy8gc3RhdGUuY2Fycy5zcGxpY2UoaW5kZXgsIDEpCiAgICAgIHZhciBwYXRpZW50SW5kZXggPSBzdGF0ZS5saXN0LmZpbmRJbmRleChmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHBhdGllbnRJRDsKICAgICAgfSk7CiAgICAgIHN0YXRlLmxpc3Quc3BsaWNlKHBhdGllbnRJbmRleCwgMSk7CiAgICB9LAogICAgZ2VuZGVyOiBmdW5jdGlvbiBnZW5kZXIoc3RhdGUsIGdlbmRlcnMpIHsKICAgICAgc3RhdGUuZ2VuZGVyID0gZ2VuZGVyczsKICAgIH0sCiAgICBzZXJ2aWNlOiBmdW5jdGlvbiBzZXJ2aWNlKHN0YXRlLCBzZXJ2aWNlcykgewogICAgICBzdGF0ZS5zZXJ2aWNlID0gc2VydmljZXM7CiAgICB9LAogICAgZmFpbDogZnVuY3Rpb24gZmFpbChzdGF0ZSwgZXJyb3IpIHsKICAgICAgc3RhdGUuZXJyb3IgPSBlcnJvcjsKICAgIH0KICB9Cn07"},{"version":3,"sources":["/var/www/html/1/medbook-dev-app-vue/src/store/PatientModule.js"],"names":["PatientService","initialState","list","error","gender","service","patient","namespaced","state","actions","getList","commit","getPatientList","then","data","Promise","resolve","console","log","reject","savePatient","saveNewPatient","record","updatePatient","deletePatient","patientID","id","genderList","serviceList","mutations","patientList","save","newPatient","push","update","updatedPatient","patientIndex","findIndex","splice","delete","genders","services","fail"],"mappings":"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","sourcesContent":["import PatientService from '../services/PatientService';\n\nconst initialState = {\n    list : null,\n    error : null,\n    gender : null,\n    service : null,\n}\nexport const patient = {\n    namespaced: true,\n    state: initialState,\n    actions: {\n        /**\n         * List all the patients\n         * \n         * @param {*} param) commit to vuex\n         */\n        getList({ commit }) { \n            return PatientService.getPatientList().then(\n                patient => {\n                    let list = patient.data\n                    commit('list', list);\n                    return Promise.resolve(list);\n                },\n                error => {\n                    console.log(error)\n                    commit('fail');\n                    return Promise.reject(error);\n                }\n            );\n        },\n\n        /**\n         * Save a new patient\n         * @param {*} param0 commit to vuex\n         * @param {*} patient \n         */\n        savePatient({ commit }, patient) {\n            return PatientService.saveNewPatient(patient).then(\n                patient => {\n                    let record = patient.data\n                    commit('save', record);\n                    return Promise.resolve(record)\n                },\n                error => {\n                    commit('fail');\n                    return Promise.reject(error);\n                }\n            );\n        },\n\n        /**\n         * Update patient record\n         * @param {*} param0 commit to vuex\n         * @param {*} patient details for patient\n         */\n        updatePatient({ commit }, patient) {\n            return PatientService.updatePatient(patient).then(\n                patient => {\n                    let record = patient.data\n                    commit('update', record);\n                    return Promise.resolve(patient)\n                },\n                error => {\n                    return Promise.reject(error);\n                }\n            );\n        },\n\n        /**\n         * Delete patient record\n         * @param {*} param0 commit to vuex\n         * @param {*} patientID \n         */\n        deletePatient({ commit }, patientID) {\n            return PatientService.deletePatient(patientID).then(\n                patient => {\n                    let record = patient.data\n                    commit('delete', record.id);\n                    return Promise.resolve(patient)\n                },\n                error => {\n                    commit('fail');\n                    return Promise.reject(error);\n                }\n            );\n        },\n\n        /**\n         * List all genders\n         */\n        genderList({commit})\n        {\n            return PatientService.genderList({commit}).then(\n                gender => {\n                    let list = gender.data\n                    commit('gender', list);\n                    return Promise.resolve(list)\n                },\n                error => {\n                    commit('fail');\n                    return Promise.reject(error);\n                }\n            );\n        },\n\n        /**\n         * List all service\n         */\n        serviceList({commit})\n        {\n            return PatientService.serviceList({commit}).then(\n                service => {\n                    let list = service.data\n                    commit('service', list);\n                    return Promise.resolve(list)\n                },\n                error => {\n                    commit('fail');\n                    return Promise.reject(error);\n                }\n            )\n        }\n    },\n    mutations: {\n        list(state, patientList) {\n            state.list = patientList\n        },\n        save(state, newPatient) {\n            // Add at the top of the array\n            // state.list.unshift(newPatient)\n            // Add at the end of the array\n            state.list.push(newPatient)\n        },\n        update(state, updatedPatient) {\n            let patientIndex = state.list.findIndex( patient => patient.id === updatedPatient.id)\n            if(patientIndex !== -1) {\n                state.list.splice(patientIndex, 1, updatedPatient)\n            }\n        },\n        delete(state, patientID) {\n            // state.list = state.list.filter((patients) => patients.id !== patientID)\n\n            // index = state.cars.findIndex(car => car.id == id)\n            // state.cars.splice(index, 1)\n\n            let patientIndex = state.list.findIndex(() => patientID)\n            state.list.splice(patientIndex, 1)\n        },\n        gender(state, genders) {\n            state.gender = genders\n        },\n        service(state, services) {\n            state.service = services\n        },\n        fail(state, error) {\n            state.error = error\n        }\n    }\n}\n"]}]}