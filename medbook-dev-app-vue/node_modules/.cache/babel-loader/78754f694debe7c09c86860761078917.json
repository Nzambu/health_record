{"remainingRequest":"/var/www/html/1/medbook-dev-app-vue/node_modules/thread-loader/dist/cjs.js!/var/www/html/1/medbook-dev-app-vue/node_modules/babel-loader/lib/index.js!/var/www/html/1/medbook-dev-app-vue/node_modules/eslint-loader/index.js??ref--13-0!/var/www/html/1/medbook-dev-app-vue/src/store/ProfileModule.js","dependencies":[{"path":"/var/www/html/1/medbook-dev-app-vue/src/store/ProfileModule.js","mtime":1610741629655},{"path":"/var/www/html/1/medbook-dev-app-vue/node_modules/cache-loader/dist/cjs.js","mtime":1610518510696},{"path":"/var/www/html/1/medbook-dev-app-vue/node_modules/thread-loader/dist/cjs.js","mtime":1610518511736},{"path":"/var/www/html/1/medbook-dev-app-vue/node_modules/babel-loader/lib/index.js","mtime":1610518510640},{"path":"/var/www/html/1/medbook-dev-app-vue/node_modules/eslint-loader/index.js","mtime":1610518511248}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgUHJvZmlsZVNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvUHJvZmlsZVNlcnZpY2UnOwp2YXIgaW5pdGlhbFN0YXRlID0gewogIHByb2ZpbGU6IFtdLAogIGVtYWlsczogW10sCiAgcGhvbmVzOiBbXQp9OwpleHBvcnQgdmFyIHByb2ZpbGUgPSB7CiAgbmFtZXNwYWNlZDogdHJ1ZSwKICBzdGF0ZTogaW5pdGlhbFN0YXRlLAogIGFjdGlvbnM6IHsKICAgIC8qKgogICAgICogR2V0IGF1dGhlbnRpY2F0ZWQgdXNlciBwcm9maWxlCiAgICAgKiAKICAgICAqIEBwYXJhbSB7Kn0gcGFyYW0wIAogICAgICovCiAgICBwcm9maWxlOiBmdW5jdGlvbiBwcm9maWxlKF9yZWYpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYuY29tbWl0OwoKICAgICAgLyoqCiAgICAgICAqIEl0IHVzZXMgYmVhcmVyIHRva2VuIHRvIGdldCBhdXRoZW50aWNhdGVkIHVzZXIKICAgICAgICovCiAgICAgIHJldHVybiBQcm9maWxlU2VydmljZS5wcm9maWxlKCkudGhlbihmdW5jdGlvbiAodXNlclByb2ZpbGUpIHsKICAgICAgICB2YXIgcHJvZmlsZSA9IHVzZXJQcm9maWxlLmRhdGE7CiAgICAgICAgY29tbWl0KCdwcm9maWxlU3VjY2VzcycsIHByb2ZpbGUpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocHJvZmlsZSk7CiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgICBjb21taXQoJ3Byb2ZpbGVGYWlsJywgZXJyb3IpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZXJyb3IpOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBVcGRhdGUgdXNlciBwcm9maWxlIGRhdGEKICAgICAqIAogICAgICogQHBhcmFtIHsqfSBwYXJhbTAgCiAgICAgKiBAcGFyYW0geyp9IHByb2ZpbGUgCiAgICAgKi8KICAgIHVwZGF0ZVByb2ZpbGU6IGZ1bmN0aW9uIHVwZGF0ZVByb2ZpbGUoX3JlZjIsIG5ld0RhdGEpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKCiAgICAgIC8qKgogICAgICAgKiBVcGRhdGUgdXNlciBwcm9maWxlCiAgICAgICAqLwogICAgICByZXR1cm4gUHJvZmlsZVNlcnZpY2UudXBkYXRlUHJvZmlsZShuZXdEYXRhKS50aGVuKGZ1bmN0aW9uIChwcm9maWxlKSB7CiAgICAgICAgdmFyIHVwZGF0ZWRQcm9maWxlRGF0YSA9IHByb2ZpbGU7CiAgICAgICAgY29tbWl0KCd1cGRhdGVQcm9maWxlJywgdXBkYXRlZFByb2ZpbGVEYXRhLmRhdGEpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXBkYXRlZFByb2ZpbGVEYXRhKTsKICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBZGQgdXNlciBlbWFpbAogICAgICogCiAgICAgKiBAcGFyYW0geyp9IHBhcmFtMCAKICAgICAqIEBwYXJhbSB7Kn0gbWFpbCAKICAgICAqLwogICAgYWRkTWFpbDogZnVuY3Rpb24gYWRkTWFpbChfcmVmMywgbWFpbCkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjMuY29tbWl0OwoKICAgICAgLyoqCiAgICAgICAqIEFkZCB1c2VyIGVtYWlsCiAgICAgICAqLwogICAgICByZXR1cm4gUHJvZmlsZVNlcnZpY2UuYWRkTmV3TWFpbChtYWlsKS50aGVuKGZ1bmN0aW9uIChmZWVkYmFjaykgewogICAgICAgIHZhciBlbWFpbCA9IGZlZWRiYWNrOwogICAgICAgIGNvbnNvbGUubG9nKGVtYWlsLmRhdGEpOwogICAgICAgIGNvbW1pdCgnYWRkTWFpbCcsIGVtYWlsLmRhdGEpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZW1haWwpOwogICAgICB9LCBmdW5jdGlvbiAoZmFpbCkgewogICAgICAgIHJldHVybiBmYWlsOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBFZGl0IHVzZXIgZW1haWwKICAgICAqIAogICAgICogQHBhcmFtIHsqfSBwYXJhbTAgCiAgICAgKiBAcGFyYW0geyp9IG1haWwgCiAgICAgKi8KICAgIGVkaXRNYWlsOiBmdW5jdGlvbiBlZGl0TWFpbChfcmVmNCwgbWFpbCkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjQuY29tbWl0OwoKICAgICAgLyoqCiAgICAgICAqIEVkaXQgdXNlciBlbWFpbAogICAgICAgKi8KICAgICAgcmV0dXJuIFByb2ZpbGVTZXJ2aWNlLmVkaXRNYWlsKG1haWwpLnRoZW4oZnVuY3Rpb24gKGZlZWRiYWNrKSB7CiAgICAgICAgdmFyIGVtYWlsID0gZmVlZGJhY2s7CiAgICAgICAgY29tbWl0KCdlZGl0TWFpbCcsIGVtYWlsLmRhdGEpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZW1haWwpOwogICAgICB9LCBmdW5jdGlvbiAoZmFpbCkgewogICAgICAgIHJldHVybiBmYWlsOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBZGQgdXNlciBwaG9uZSBudW1iZXIKICAgICAqIAogICAgICogQHBhcmFtIHsqfSBwYXJhbTAgCiAgICAgKiBAcGFyYW0geyp9IG1haWwgCiAgICAgKi8KICAgIGFkZFBob25lOiBmdW5jdGlvbiBhZGRQaG9uZShfcmVmNSwgcGhvbmUpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY1LmNvbW1pdDsKCiAgICAgIC8qKgogICAgICAgKiBBZGQgdXNlciBwaG9uZQogICAgICAgKi8KICAgICAgcmV0dXJuIFByb2ZpbGVTZXJ2aWNlLmFkZE5ld1Bob25lKHBob25lKS50aGVuKGZ1bmN0aW9uIChmZWVkYmFjaykgewogICAgICAgIHZhciBwaG9uZU51bWJlciA9IGZlZWRiYWNrOwogICAgICAgIGNvbW1pdCgnYWRkUGhvbmUnLCBwaG9uZU51bWJlci5kYXRhKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBob25lTnVtYmVyKTsKICAgICAgfSwgZnVuY3Rpb24gKGZhaWwpIHsKICAgICAgICByZXR1cm4gZmFpbDsKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogRWRpdCB1c2VyIHBob25lIG51bWJlciAKICAgICAqIAogICAgICogQHBhcmFtIHsqfSBwYXJhbTAgCiAgICAgKiBAcGFyYW0geyp9IG1haWwgCiAgICAgKi8KICAgIGVkaXRQaG9uZTogZnVuY3Rpb24gZWRpdFBob25lKF9yZWY2LCBwaG9uZSkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjYuY29tbWl0OwoKICAgICAgLyoqCiAgICAgICAqIEVkaXQgdXNlciBwaG9uZQogICAgICAgKi8KICAgICAgcmV0dXJuIFByb2ZpbGVTZXJ2aWNlLmVkaXRQaG9uZShwaG9uZSkudGhlbihmdW5jdGlvbiAoZmVlZGJhY2spIHsKICAgICAgICB2YXIgcGhvbmVOdW1iZXIgPSBmZWVkYmFjazsKICAgICAgICBjb21taXQoJ2VkaXRQaG9uZScsIHBob25lTnVtYmVyLmRhdGEpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocGhvbmVOdW1iZXIpOwogICAgICB9LCBmdW5jdGlvbiAoZmFpbCkgewogICAgICAgIHJldHVybiBmYWlsOwogICAgICB9KTsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgLyoqCiAgICAgKiBIYW5kbGUgbGFvZGVkIHVzZXIgcHJvZmlsZQogICAgICogCiAgICAgKiBAcGFyYW0geyp9IHN0YXRlIAogICAgICogQHBhcmFtIHsqfSBwcm9maWxlIAogICAgICovCiAgICBwcm9maWxlU3VjY2VzczogZnVuY3Rpb24gcHJvZmlsZVN1Y2Nlc3Moc3RhdGUsIHByb2ZpbGUpIHsKICAgICAgc3RhdGUucHJvZmlsZSA9IHByb2ZpbGU7CiAgICAgIHN0YXRlLmVtYWlscyA9IHByb2ZpbGUucmVsYXRpb25zaGlwcy5lbWFpbFswXTsKICAgICAgc3RhdGUucGhvbmVzID0gcHJvZmlsZS5yZWxhdGlvbnNoaXBzLnBob25lWzBdOwogICAgfSwKCiAgICAvKioKICAgICAqIEhhbmRsZSB1cGRhdGUgdXNlciBwcm9maWxlCiAgICAgKiAKICAgICAqIEBwYXJhbSB7Kn0gc3RhdGUgCiAgICAgKiBAcGFyYW0geyp9IG5ld1Byb2ZpbGUgCiAgICAgKi8KICAgIHVwZGF0ZVByb2ZpbGU6IGZ1bmN0aW9uIHVwZGF0ZVByb2ZpbGUoc3RhdGUsIG5ld1Byb2ZpbGUpIHsKICAgICAgc3RhdGUucHJvZmlsZSA9IG5ld1Byb2ZpbGU7CiAgICAgIHN0YXRlLmVtYWlscyA9IG5ld1Byb2ZpbGUucmVsYXRpb25zaGlwcy5lbWFpbFswXTsKICAgICAgc3RhdGUucGhvbmVzID0gbmV3UHJvZmlsZS5yZWxhdGlvbnNoaXBzLnBob25lWzBdOwogICAgfSwKCiAgICAvKioKICAgICAqIEhhbmRsZSBhZGQgdXNlciBlbWFpbAogICAgICogCiAgICAgKiBAcGFyYW0geyp9IHN0YXRlIAogICAgICogQHBhcmFtIHsqfSBlbWFpbCAKICAgICAqLwogICAgYWRkTWFpbDogZnVuY3Rpb24gYWRkTWFpbChzdGF0ZSwgZW1haWwpIHsKICAgICAgc3RhdGUuZW1haWxzLnB1c2goZW1haWwpOwogICAgfSwKCiAgICAvKioKICAgICAqIEhhbmRsZSBlZGl0IHVzZXIgZW1haWwKICAgICAqIAogICAgICogQHBhcmFtIHsqfSBzdGF0ZSAKICAgICAqIEBwYXJhbSB7Kn0gbmV3RW1haWwgCiAgICAgKi8KICAgIGVkaXRNYWlsOiBmdW5jdGlvbiBlZGl0TWFpbChzdGF0ZSwgdXBkYXRlZEVtYWlsKSB7CiAgICAgIHZhciBtYWlsTGlzdCA9IHN0YXRlLmVtYWlsczsKICAgICAgdmFyIG1haWxJbmRleCA9IG1haWxMaXN0LmZpbmRJbmRleChmdW5jdGlvbiAobWFpbCkgewogICAgICAgIHJldHVybiBtYWlsLmlkID09PSB1cGRhdGVkRW1haWwuaWQ7CiAgICAgIH0pOwoKICAgICAgaWYgKG1haWxJbmRleCAhPT0gLTEpIHsKICAgICAgICBtYWlsTGlzdC5zcGxpY2UobWFpbEluZGV4LCAxLCB1cGRhdGVkRW1haWwpOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogSGFuZGxlIGFkZCB1c2VyIHBob25lCiAgICAgKiAKICAgICAqIEBwYXJhbSB7Kn0gc3RhdGUgCiAgICAgKiBAcGFyYW0geyp9IHBob25lIAogICAgICovCiAgICBhZGRQaG9uZTogZnVuY3Rpb24gYWRkUGhvbmUoc3RhdGUsIHBob25lKSB7CiAgICAgIHN0YXRlLnBob25lcy5wdXNoKHBob25lKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBIYW5kbGUgZWRpdCB1c2VyIHBob25lCiAgICAgKiAKICAgICAqIEBwYXJhbSB7Kn0gc3RhdGUgCiAgICAgKiBAcGFyYW0geyp9IG5ld1Bob25lIAogICAgICovCiAgICBlZGl0UGhvbmU6IGZ1bmN0aW9uIGVkaXRQaG9uZShzdGF0ZSwgdXBkYXRlZFBob25lKSB7CiAgICAgIHZhciBwaG9uZUxpc3QgPSBzdGF0ZS5waG9uZXM7CiAgICAgIHZhciBwaG9uZUluZGV4ID0gcGhvbmVMaXN0LmZpbmRJbmRleChmdW5jdGlvbiAobWFpbCkgewogICAgICAgIHJldHVybiBtYWlsLmlkID09PSB1cGRhdGVkUGhvbmUuaWQ7CiAgICAgIH0pOwoKICAgICAgaWYgKHBob25lSW5kZXggIT09IC0xKSB7CiAgICAgICAgcGhvbmVMaXN0LnNwbGljZShwaG9uZUluZGV4LCAxLCB1cGRhdGVkUGhvbmUpOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogSGFuZGxlIGZhaWxlZCB0byBsb2FkIHByb2ZpbGUKICAgICAqLwogICAgcHJvZmlsZUZhaWw6IGZ1bmN0aW9uIHByb2ZpbGVGYWlsKHN0YXRlLCBlcnJvcikgewogICAgICBzdGF0ZS5wcm9maWxlRXJyb3IgPSBlcnJvcjsKICAgIH0KICB9Cn07"},{"version":3,"sources":["/var/www/html/1/medbook-dev-app-vue/src/store/ProfileModule.js"],"names":["ProfileService","initialState","profile","emails","phones","namespaced","state","actions","commit","then","userProfile","data","Promise","resolve","error","console","log","updateProfile","newData","updatedProfileData","addMail","mail","addNewMail","feedback","email","fail","editMail","addPhone","phone","addNewPhone","phoneNumber","editPhone","mutations","profileSuccess","relationships","newProfile","push","updatedEmail","mailList","mailIndex","findIndex","id","splice","updatedPhone","phoneList","phoneIndex","profileFail","profileError"],"mappings":"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","sourcesContent":["import ProfileService from '../services/ProfileService';\nconst initialState = {\n    profile : [],\n    emails : [],\n    phones : []\n}\nexport const profile = {\n    namespaced: true,\n    state: initialState,\n    actions: {\n        \n        /**\n         * Get authenticated user profile\n         * \n         * @param {*} param0 \n         */\n        profile({ commit }) {\n\n            /**\n             * It uses bearer token to get authenticated user\n             */\n            return ProfileService.profile().then(\n                userProfile => {\n                    let profile = userProfile.data\n                    commit('profileSuccess', profile)\n                    return Promise.resolve(profile)\n                },\n                error => {\n                    console.log(error)\n                    commit('profileFail', error)\n                    return Promise.resolve(error)\n                }\n            );\n        },\n\n        /**\n         * Update user profile data\n         * \n         * @param {*} param0 \n         * @param {*} profile \n         */\n        updateProfile({ commit }, newData) {\n\n            /**\n             * Update user profile\n             */\n            return ProfileService.updateProfile(newData)\n                .then(\n                profile => {\n                    let updatedProfileData = profile;\n                    commit('updateProfile', updatedProfileData.data);\n                    return Promise.resolve(updatedProfileData);\n                },\n                error => {\n                    return error\n                });\n        },\n\n        /**\n         * Add user email\n         * \n         * @param {*} param0 \n         * @param {*} mail \n         */\n        addMail({ commit }, mail) {\n\n            /**\n             * Add user email\n             */\n            return ProfileService.addNewMail(mail)\n            .then(\n                feedback => {\n                    let email = feedback\n                    console.log(email.data)\n                    commit('addMail', email.data)\n                    return Promise.resolve(email)\n                },\n                fail => {\n                    return fail\n                }\n            );\n        },\n\n        /**\n         * Edit user email\n         * \n         * @param {*} param0 \n         * @param {*} mail \n         */\n        editMail({ commit }, mail) {\n\n            /**\n             * Edit user email\n             */\n            return ProfileService.editMail(mail)\n            .then(\n                feedback => {\n                    let email = feedback\n                    commit('editMail', email.data)\n                    return Promise.resolve(email)\n                },\n                fail => {\n                    return fail\n                }\n            );\n        },\n\n        /**\n         * Add user phone number\n         * \n         * @param {*} param0 \n         * @param {*} mail \n         */\n        addPhone({ commit }, phone) {\n\n            /**\n             * Add user phone\n             */\n            return ProfileService.addNewPhone(phone)\n            .then(\n                feedback => {\n                    let phoneNumber = feedback\n                    commit('addPhone', phoneNumber.data)\n                    return Promise.resolve(phoneNumber)\n                },\n                fail => {\n                    return fail\n                }\n            );\n        },\n\n        /**\n         * Edit user phone number \n         * \n         * @param {*} param0 \n         * @param {*} mail \n         */\n        editPhone({ commit }, phone) {\n\n            /**\n             * Edit user phone\n             */\n            return ProfileService.editPhone(phone)\n            .then(\n                feedback => {\n                    let phoneNumber = feedback\n                    commit('editPhone', phoneNumber.data)\n                    return Promise.resolve(phoneNumber)\n                },\n                fail => {\n                    return fail\n                }\n            );\n        }\n    },\n    mutations: {\n\n        /**\n         * Handle laoded user profile\n         * \n         * @param {*} state \n         * @param {*} profile \n         */\n        profileSuccess(state, profile) {\n            state.profile = profile\n            state.emails = profile.relationships.email[0]\n            state.phones = profile.relationships.phone[0]\n        },\n\n        /**\n         * Handle update user profile\n         * \n         * @param {*} state \n         * @param {*} newProfile \n         */\n        updateProfile(state, newProfile) {\n            state.profile = newProfile\n            state.emails = newProfile.relationships.email[0]\n            state.phones = newProfile.relationships.phone[0]\n        },\n\n        /**\n         * Handle add user email\n         * \n         * @param {*} state \n         * @param {*} email \n         */\n        addMail(state, email) {\n            state.emails.push(email)\n        },\n\n        /**\n         * Handle edit user email\n         * \n         * @param {*} state \n         * @param {*} newEmail \n         */\n        editMail(state, updatedEmail) {\n            let mailList = state.emails\n            let mailIndex = mailList.findIndex( mail => mail.id === updatedEmail.id)\n            if(mailIndex !== -1) {\n                mailList.splice(mailIndex, 1, updatedEmail)\n            }\n        },\n\n        /**\n         * Handle add user phone\n         * \n         * @param {*} state \n         * @param {*} phone \n         */\n        addPhone(state, phone) {\n            state.phones.push(phone)\n        },\n\n        /**\n         * Handle edit user phone\n         * \n         * @param {*} state \n         * @param {*} newPhone \n         */\n        editPhone(state, updatedPhone) {\n            let phoneList = state.phones\n            let phoneIndex = phoneList.findIndex( mail => mail.id === updatedPhone.id)\n            if(phoneIndex !== -1) {\n                phoneList.splice(phoneIndex, 1, updatedPhone)\n            }\n        },\n\n        /**\n         * Handle failed to load profile\n         */\n        profileFail(state, error) {\n            state.profileError = error\n        },\n    }\n}"]}]}